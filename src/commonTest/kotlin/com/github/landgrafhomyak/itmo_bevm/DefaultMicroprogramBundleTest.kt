package com.github.landgrafhomyak.itmo_bevm

import kotlin.test.Test
import kotlin.test.assertContains
import kotlin.test.assertEquals

class DefaultMicroprogramBundleTest {
    @Test
    fun testLabels() {
        val unchecked = defaultMicroprogramBundle.labels.keys.toMutableSet()
        @Suppress("SpellCheckingInspection")
        for ((lbl, addr) in labels) {
            assertContains(defaultMicroprogramBundle.labels, lbl)
            assertEquals(addr, defaultMicroprogramBundle.labels[lbl], "label '$lbl' have 0x${defaultMicroprogramBundle.labels[lbl]!!.toString(16).padStart(2, '0')}, expected 0x${addr.toString(16).padStart(2, '0')}")
            unchecked.remove(lbl)
        }
        assertEquals(0, unchecked.size, "Left labels (unchecked): $unchecked")
    }

    @Test
    fun testCodes() {
        @Suppress("SpellCheckingInspection")
        (defaultMicroprogramBundle.commands zip packedMicroprogramBundle).forEachIndexed { addr, (mcc, bin) ->
            assertEquals(bin, mcc.toUnsigned(), "at address 0x${addr.toString(16).padStart(2, '0')} expected 0x${bin.toString(16).padStart(10, '0')} actual 0x${mcc.toUnsigned().toString(16).padStart(10, '0')}")
        }
    }
}

@Suppress("RemoveExplicitTypeArguments", "SpellCheckingInspection")
private val labels = mapOf<String, UByte>(
    "INFETCH" to 0x01u,
    "CHKBR" to 0x09u,
    "CHKABS" to 0x0Cu,
    "ADFETCH" to 0x0Du,
    "T10XX" to 0x0Fu,
    "T100X" to 0x12u,
    "T1000" to 0x13u,
    "T101X" to 0x14u,
    "T1010" to 0x15u,
    "T1011" to 0x19u,
    "T11XX" to 0x1Cu,
    "T110X" to 0x1Du,
    "T1100" to 0x1Eu,
    "T111X" to 0x20u,
    "T1111" to 0x21u,
    "T1110" to 0x23u,
    "OPFETCH" to 0x24u,
    "RDVALUE" to 0x26u,
    "EXEC" to 0x28u,
    "CMD0XXX" to 0x29u,
    "CMD000X" to 0x2Au,
    "AND" to 0x2Bu,
    "OR" to 0x2Du,
    "CMD01XX" to 0x30u,
    "CMD010X" to 0x31u,
    "ADD" to 0x32u,
    "ADC" to 0x34u,
    "CMD011X" to 0x37u,
    "SUB" to 0x38u,
    "CMP" to 0x3Au,
    "CMD1XXX" to 0x3Cu,
    "CMD100X" to 0x3Du,
    "LOOP" to 0x3Eu,
    "CMD101X" to 0x43u,
    "LD" to 0x44u,
    "SWAM" to 0x46u,
    "CMD11XX" to 0x4Au,
    "CMD110X" to 0x4Bu,
    "JUMP" to 0x4Cu,
    "CALL" to 0x4Eu,
    "PUSHVAL" to 0x51u,
    "ST" to 0x53u,
    "STORE" to 0x55u,
    "BRANCHES" to 0x57u,
    "BR0XXX" to 0x58u,
    "BR00XX" to 0x59u,
    "BR000X" to 0x5Au,
    "BEQ" to 0x5Bu,
    "BR" to 0x5Cu,
    "BNE" to 0x5Fu,
    "BR001X" to 0x61u,
    "BMI" to 0x62u,
    "BPL" to 0x64u,
    "BR01XX" to 0x66u,
    "BR010X" to 0x67u,
    "BCS" to 0x68u,
    "BCC" to 0x6Au,
    "BR011X" to 0x6Cu,
    "BVS" to 0x6Du,
    "BVC" to 0x6Fu,
    "BR1XXX" to 0x71u,
    "BR10XX" to 0x72u,
    "BR100X" to 0x73u,
    "BLT" to 0x74u,
    "BGE" to 0x76u,
    "ADDRLESS" to 0x78u,
    "AL0XXX" to 0x79u,
    "AL00XX" to 0x7Au,
    "AL000X" to 0x7Bu,
    "HLT" to 0x7Cu,
    "AL001X" to 0x7Du,
    "AL0010" to 0x7Eu,
    "CLA" to 0x7Fu,
    "NOT" to 0x81u,
    "AL0011" to 0x83u,
    "CLC" to 0x84u,
    "CMC" to 0x86u,
    "AL01XX" to 0x89u,
    "AL010X" to 0x8Au,
    "AL0100" to 0x8Bu,
    "ROL" to 0x8Cu,
    "ROR" to 0x8Eu,
    "AL0101" to 0x90u,
    "ASL" to 0x91u,
    "ASR" to 0x94u,
    "AL011X" to 0x96u,
    "AL0110" to 0x97u,
    "SXTB" to 0x98u,
    "SWAB" to 0x9Au,
    "AL0111" to 0x9Cu,
    "AL01110" to 0x9Du,
    "INC" to 0x9Eu,
    "DEC" to 0xA0u,
    "NEG" to 0xA2u,
    "AL1XXX" to 0xA4u,
    "AL10XX" to 0xA5u,
    "AL100X" to 0xA8u,
    "POP" to 0xA9u,
    "INCSP" to 0xAAu,
    "POPF" to 0xACu,
    "AL101X" to 0xAEu,
    "RET" to 0xAFu,
    "IRET" to 0xB1u,
    "AL11XX" to 0xB5u,
    "AL110X" to 0xB6u,
    "PUSH" to 0xB7u,
    "PUSHF" to 0xB9u,
    "AL111X" to 0xBBu,
    "SWAP" to 0xBCu,
    "IO" to 0xC2u,
    "DOIO" to 0xC3u,
    "INT" to 0xC4u,
    "IRQ" to 0xC7u,
    "START" to 0xD4u,
    "READ" to 0xD6u,
    "WRITE" to 0xD9u,
    "SETIP" to 0xDDu,
    "STOP" to 0xDEu,
    "RESERVED" to 0xE0u
)

@Suppress("RemoveExplicitTypeArguments")
private val packedMicroprogramBundle = arrayOf<ULong>(
    // 0x00
    0x0000000000uL,
    0x00a0009004uL,
    0x0104009420uL,
    0x0002009001uL,
    0x8109804002uL,
    0x810C404002uL,
    0x810C204002uL,
    0x8078104002uL,
    0x80C2101040uL,
    0x800C404002uL,
    0x800C204002uL,
    0x8157104002uL,
    0x8024084002uL,
    0x0020011002uL,
    0x811c044002uL,
    0x0080009024uL,
    // 0x10
    0x0100000000uL,
    0x8114024002uL,
    0x81E0014002uL,
    0x8024101040uL,
    0x8119014002uL,
    0x0001009401uL,
    0x0200000000uL,
    0x0001009201uL,
    0x8024101040uL,
    0x0001009201uL,
    0x0200000000uL,
    0x8024101040uL,
    0x8120024002uL,
    0x81E0014002uL,
    0x0001009028uL,
    0x8024101040uL,
    // 0x20
    0x8023014002uL,
    0x0001009020uL,
    0x8028101040uL,
    0x0001009024uL,
    0x8026804002uL,
    0x814A404002uL,
    0x0080009001uL,
    0x0100000000uL,
    0x813C804002uL,
    0x8130404002uL,
    0x812D104002uL,
    0x0010C09811uL,
    0x80C4101040uL,
    0x0020009B11uL,
    0x0010C09220uL,
    0x80C4101040uL,
    // 0x30
    0x8137204002uL,
    0x8134104002uL,
    0x0010E09011uL,
    0x80C4101040uL,
    0x8032011040uL,
    0x0010E09411uL,
    0x80C4101040uL,
    0x813A104002uL,
    0x0010E09511uL,
    0x80C4101040uL,
    0x0000E09511uL,
    0x80C4101040uL,
    0x8143204002uL,
    0x81E0104002uL,
    0x0001009201uL,
    0x0220009201uL,
    // 0x40
    0x80C4804020uL,
    0x0004009404uL,
    0x80C4101040uL,
    0x8146104002uL,
    0x0010C09001uL,
    0x80C4101040uL,
    0x0020009001uL,
    0x0001009010uL,
    0x0210C09020uL,
    0x80C4101040uL,
    0x8153204002uL,
    0x814E104002uL,
    0x0004009001uL,
    0x80C4101040uL,
    0x0020009001uL,
    0x0001009004uL,
    // 0x50
    0x0004009020uL,
    0x0088009208uL,
    0x8055101040uL,
    0x0080009001uL,
    0x0001009010uL,
    0x0200000000uL,
    0x80C4101040uL,
    0x8171084002uL,
    0x8166044002uL,
    0x8161024002uL,
    0x815F014002uL,
    0x80C4041040uL,
    0x0020011002uL,
    0x0004009024uL,
    0x80C4101040uL,
    0x805C041040uL,
    // 0x60
    0x80C4101040uL,
    0x8164014002uL,
    0x815C081040uL,
    0x80C4101040uL,
    0x805C081040uL,
    0x80C4101040uL,
    0x816C024002uL,
    0x816A014002uL,
    0x815C011040uL,
    0x80C4101040uL,
    0x805C011040uL,
    0x80C4101040uL,
    0x816F014002uL,
    0x815C021040uL,
    0x80C4101040uL,
    0x805C021040uL,
    // 0x70
    0x80c4101040uL,
    0x81e0044002uL,
    0x81e0024002uL,
    0x8176014002uL,
    0x806D081040uL,
    0x806F101040uL,
    0x806F081040uL,
    0x806D101040uL,
    0x81A4084002uL,
    0x8189044002uL,
    0x817D024002uL,
    0x80C4014002uL,
    0x80DE101040uL,
    0x8183014002uL,
    0x8181801002uL,
    0x0010C00000uL,
    // 0x80
    0x80C4101040uL,
    0x0010C09210uL,
    0x80C4101040uL,
    0x8186801002uL,
    0x0000200000uL,
    0x80C4101040uL,
    0x8184011040uL,
    0x0000208300uL,
    0x80C4101040uL,
    0x8196024002uL,
    0x8190014002uL,
    0x818E801002uL,
    0x0010E60010uL,
    0x80C4101040uL,
    0x0010F80010uL,
    0x80C4101040uL,
    // 0x90
    0x8194801002uL,
    0x0001009010uL,
    0x0010E09011uL,
    0x80C4101040uL,
    0x0010E80010uL,
    0x80C4101040uL,
    0x819C014002uL,
    0x819A801002uL,
    0x0010C11010uL,
    0x80C4101040uL,
    0x0010C06010uL,
    0x80C4101040uL,
    0x81A2801002uL,
    0x81A0401002uL,
    0x0010E09410uL,
    0x80C4101040uL,
    // 0xA0
    0x0010E09110uL,
    0x80C4101040uL,
    0x0010E09610uL,
    0x80C4101040uL,
    0x81B5044002uL,
    0x0080009008uL,
    0x0100000000uL,
    0x81AE024002uL,
    0x81AC014002uL,
    0x0010C09001uL,
    0x0008009408uL,
    0x80C4101040uL,
    0x0040009001uL,
    0x80AA101040uL,
    0x81B1014002uL,
    0x0004009001uL,
    // 0xB0
    0x80AA101040uL,
    0x0040009001uL,
    0x0088009408uL,
    0x0100000000uL,
    0x80AF101040uL,
    0x81BB024002uL,
    0x81B9014002uL,
    0x0001009010uL,
    0x8051101040uL,
    0x0001009040uL,
    0x8051101040uL,
    0x81E0014002uL,
    0x0080009008uL,
    0x0100000000uL,
    0x0020009001uL,
    0x0001009010uL,
    // 0xC0
    0x0210C09020uL,
    0x80C4101040uL,
    0x81C7084002uL,
    0x0400000000uL,
    0x80DE801040uL,
    0x8001401040uL,
    0x0800000000uL,
    0x0088009208uL,
    0x0001009004uL,
    0x0200000000uL,
    0x0088009208uL,
    0x0001009040uL,
    0x0220001002uL,
    0x00A0020020uL,
    0x0100000000uL,
    0x0004009001uL,
    // 0xD0
    0x0080001420uL,
    0x0100000000uL,
    0x0040009001uL,
    0x8001101040uL,
    0x00BBE00000uL,
    0x80C3101040uL,
    0x0080009004uL,
    0x0104009404uL,
    0x80DE101040uL,
    0x0080009004uL,
    0x0001009080uL,
    0x0204009404uL,
    0x80DE101040uL,
    0x0004009080uL,
    0x4000000000uL,
    0x8001101040uL
)